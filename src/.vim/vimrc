" Setup vim-plug https://github.com/junegunn/vim-plug/wiki/tips#automatic-installation
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin()
Plug 'mhinz/vim-startify'
Plug 'vim-airline/vim-airline'
Plug 'easymotion/vim-easymotion'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'aymericbeaumet/vim-symlink'
Plug 'airblade/vim-gitgutter'
Plug 'voldikss/vim-floaterm'
Plug 'junegunn/fzf', {'do': { -> fzf#install() }}
Plug 'junegunn/fzf.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'hrsh7th/vim-vsnip'
Plug 'hrsh7th/vim-vsnip-integ'
Plug 'dhruvasagar/vim-table-mode'
Plug 'chrisbra/csv.vim'
call plug#end()

let &t_SI = "\e[3 q"
let &t_EI = "\e[1 q"
augroup cursor_shape
  au!
  autocmd CmdlineEnter * call echoraw(&t_SI)
  autocmd CmdlineLeave * call echoraw(&t_EI)
augroup END

set encoding=utf-8
set scrolloff=0
set ignorecase
set smartcase
set hlsearch
set incsearch
set splitright
set splitbelow
set wildoptions=fuzzy
set wildmode=list:full
set backspace=indent,eol,start
set list listchars=tab:\\u00BB\\x20,trail:\\u2601
set expandtab
set tabstop=2
set shiftwidth=0
set showtabline=2
set confirm
set mouse=a
set relativenumber
syntax on
colorscheme habamax
set background=dark
highlight Normal ctermbg=NONE

if has_key(g:plugs, 'vim-startify')
  let g:startify_change_to_vcs_root = 1
  let g:startify_change_to_dir = 1
  let g:startify_change_cmd = 'lcd'
  let g:startify_bookmarks = [
        \ { 'c': '~/.vim/vimrc' },
        \ ]
endif
if has_key(g:plugs, 'vim-airline')
endif
if has_key(g:plugs, 'vim-easymotion')
  " Turn on case-insensitive feature
  let g:EasyMotion_smartcase = 1
  " keep cursor column when JK motion
  let g:EasyMotion_startofline = 0
  " Disable default mappings
  let g:EasyMotion_do_mapping = 0

  " Jump to anywhere you want with minimal keystrokes, with just one key binding.
  " `s{char}{label}`
  nmap s <Plug>(easymotion-overwin-f)
  " or
  " `s{char}{char}{label}`
  " Need one more keystroke, but on average, it may be more comfortable.
  " nmap s <Plug>(easymotion-overwin-f2)

  " JK motions: Line motions
  map <Leader>j <Plug>(easymotion-j)
  map <Leader>k <Plug>(easymotion-k)

  map <Leader>l <Plug>(easymotion-overwin-line)
endif
if has_key(g:plugs, 'vim-surround')
endif
if has_key(g:plugs, 'vim-commentary')
endif
if has_key(g:plugs, 'vim-fugitive')
endif
if has_key(g:plugs, 'vim-gitgutter')
  augroup gitgutter_local
    au!
    autocmd BufWritePost * GitGutter
  augroup END
endif
if has_key(g:plugs, 'vim-floaterm')
  nnoremap <silent> <F12> :FloatermToggle<CR>
  tnoremap <silent> <F12> <C-\><C-n>:FloatermToggle<CR>
endif
if has_key(g:plugs, 'fzf')
  " An action can be a reference to a function that processes selected lines
  function! s:build_quickfix_list(lines)
    call setqflist(map(copy(a:lines), '{ "filename": v:val, "lnum": 1 }'))
    copen
    wincmd p
    vsplit
    cc
  endfunction
  let g:fzf_action = {
        \ 'ctrl-q': function('s:build_quickfix_list'),
        \ 'ctrl-t': 'tab split',
        \ 'ctrl-x': 'split',
        \ 'ctrl-v': 'vsplit',
        \ }
endif
if has_key(g:plugs, 'fzf.vim')
  let g:fzf_vim = {}
  let g:fzf_vim.preview_window = ['right,50%', 'ctrl-/']

  nmap <leader><tab> <plug>(fzf-maps-n)
  xmap <leader><tab> <plug>(fzf-maps-x)
  omap <leader><tab> <plug>(fzf-maps-o)
  imap <c-x><c-k> <plug>(fzf-complete-word)
  imap <c-x><c-f> <plug>(fzf-complete-path)
  imap <c-x><c-l> <plug>(fzf-complete-line)
  function! s:make_sentence(lines)
    return substitute(join(a:lines), '^.', '\=toupper(submatch(0))', '').'.'
  endfunction
  inoremap <expr> <c-x><c-s> fzf#vim#complete({
        \ 'source':  'cat /usr/share/dict/words',
        \ 'reducer': function('<sid>make_sentence'),
        \ 'options': '--multi --reverse --margin 15%,0',
        \ 'left':    20})
  command! -bang -nargs=* GGrep
        \ call fzf#vim#grep(
        \   'git grep --line-number -- '.shellescape(<q-args>), 0,
        \   fzf#vim#with_preview({'dir': systemlist('git rev-parse --show-toplevel')[0]}), <bang>0)
  command! -bang Grep call fzf#vim#grep(
        \ 'grep -vnITr --color=always'
        \  .. ' ' .. substitute(expand('--exclude-dir={".svn",".git","target"}'), "\\n", ' ', 'g')
        \  .. ' ' .. substitute(expand('--exclude={"*\.exe","*\.zip","*\.class","*\.dll"}'), "\\n", ' ', 'g')
        \  .. ' ' .. "^$",
        \ 0,
        \ {})
endif
if has_key(g:plugs, 'vim-lsp')
  let g:lsp_diagnostics_enabled = 1
  let g:lsp_diagnostics_echo_cursor = 1
  let g:lsp_diagnostics_echo_delay = 0
  let g:lsp_diagnostics_float_cursor = 0
  let g:lsp_diagnostics_float_delay = 0
  let g:lsp_diagnostics_signs_delay = 0
  let g:lsp_diagnostics_virtual_text_enabled = 0
  let g:lsp_diagnostics_virtual_text_insert_mode_enabled = 0
  let g:lsp_inlay_hints_enabled = 0
  let g:lsp_format_sync_timeout = 1000
  fun! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    if exists('+tagfunc')
      setlocal tagfunc=lsp#tagfunc
    endif
    nmap <buffer> cd <plug>(lsp-rename)
    nmap <buffer> gd <plug>(lsp-peek-definition)
    nmap <buffer> gD <plug>(lsp-definition)
    nmap <buffer> gh <plug>(lsp-hover)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gk <plug>(lsp-code-action)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gt <plug>(lsp-type-definition)
    nmap <buffer> gs <plug>(lsp-document-symbol-search)
    nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
    nmap <buffer> = <plug>(lsp-document-format)
    nmap <buffer> g[ <plug>(lsp-previous-diagnostic)
    nmap <buffer> g] <plug>(lsp-next-diagnostic)
    nnoremap <buffer> <expr><c-e> len(popup_list()) > 0 ? lsp#scroll(+1) : "\<C-E>"
    nnoremap <buffer> <expr><c-d> len(popup_list()) > 0 ? lsp#scroll(+4) : "\<C-D>"
    nnoremap <buffer> <expr><c-y> len(popup_list()) > 0 ? lsp#scroll(-1) : "\<C-Y>"
    nnoremap <buffer> <expr><c-u> len(popup_list()) > 0 ? lsp#scroll(-4) : "\<C-U>"
    inoremap <buffer> <expr><c-e> len(popup_list()) > 0 ? lsp#scroll(+1) : "\<C-E>"
    inoremap <buffer> <expr><c-d> len(popup_list()) > 0 ? lsp#scroll(+4) : "\<C-D>"
    inoremap <buffer> <expr><c-y> len(popup_list()) > 0 ? lsp#scroll(-1) : "\<C-Y>"
    inoremap <buffer> <expr><c-u> len(popup_list()) > 0 ? lsp#scroll(-4) : "\<C-U>"
  endfun

  if executable('pylsp')
    au User lsp_setup call lsp#register_server({
          \   'name': 'pylsp',
          \   'cmd': {server_info->['pylsp']},
          \   'allowlist': ['python'],
          \   'config': {'pylsp': {'plugins': {'autopep8': {'enabled': v:false}}}},
          \ })
  endif
  if executable('rust-analyzer')
    au User lsp_setup call lsp#register_server({
          \   'name': 'rust-analyzer',
          \   'cmd': {server_info->['rust-analyzer']},
          \   'whitelist': ['rust'],
          \   'initialization_options': {
          \     'cargo': {
          \       'buildScripts': {
          \         'enable': v:true,
          \       },
          \     },
          \     'check': {
          \       'command': 'clippy',
          \     },
          \     'completion': {
          \       'snippets': {
          \         'custom': json_decode(join(readfile(expand('~/.vim/snippets/rust.json'))))
          \       }
          \     },
          \   }
          \ })
    augroup rust-analyzer
      au!
      autocmd! BufWritePre <buffer> LspDocumentFormatSync
    augroup END
  endif
  if executable('vim-language-server')
    au User lsp_setup call lsp#register_server({
          \   'name': 'vimls',
          \   'cmd': {server_info->
          \   [&shell, &shellcmdflag, 'vim-language-server --stdio']},
          \   'allowlist': ['vim'],
          \   'semantic_highlight': v:true,
          \ })
  endif
  if executable('jdtls')
      au User lsp_setup call lsp#register_server({
          \ 'name': 'jdtls',
          \ 'cmd': {server_info->['jdtls']},
          \ 'allowlist': ['java'],
          \ })
    autocmd BufWritePre *.java
          \ execute('LspCodeActionSync source.organizeImports') |
          \ LspDocumentFormatSync
    function! s:apply_workspaceEdit(context)
        let l:command = get(a:context, 'command', {})
        call lsp#utils#workspace_edit#apply_workspace_edit(l:command['arguments'][0])
    endfunction
    try
      call lsp#register_command('java.apply.workspaceEdit', function('s:apply_workspaceEdit'))
    catch /.*/
    endtry
  endif

  augroup lsp_install
    au!
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
  augroup END
  command! LspDebug
        \ let lsp_log_verbose=1 |
        \ let lsp_log_file = expand('~/lsp.log') |
        \ :vnew | execute "ter ++curwin tail -f " . expand('~/lsp.log') |
        \ :wincmd p
endif
if has_key(g:plugs, 'asyncomplete.vim')
  let g:asyncomplete_popup_delay = 0
  inoremap <expr> <CR> pumvisible() ? asyncomplete#close_popup() : "\<CR>"
endif
if has_key(g:plugs, 'asyncomplete-lsp.vim')
endif
if has_key(g:plugs, 'vim-vsnip')
  let g:vsnip_snippet_dir = '$HOME/.vim/snippets'
  fun! s:handle_imap_tab()
    if vsnip#jumpable(1)
      return "\<Plug>(vsnip-jump-next)"
    endif
    let l:compArg = getline('.')[:col('.')]
    return "\<Tab>"
  endfun
  imap <expr> <Tab> <SID>handle_imap_tab()
  smap <expr> <Tab> vsnip#jumpable(1) ? '<Plug>(vsnip-jump-next)' : '<Tab>'
  smap <expr> <S-Tab> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<S-Tab>'
  imap <expr> <S-Tab> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<S-Tab>'
endif
if has_key(g:plugs, 'vim-vsnip-integ')
endif
if has_key(g:plugs, 'vim-table-mode')
endif

augroup vba
  au!
  au BufReadPost *.bas,*.cls,*.dcm,*.frm edit ++enc=cp932 %
augroup END
augroup git_local
  au!
  autocmd FileType gitconfig set noexpandtab
augroup END

nnoremap <silent> <C-[><C-[> :noh<CR>
nnoremap <C-L> gt
nnoremap <C-H> gT
nnoremap <silent> <C-S> :update<CR>
nnoremap <silent> gb :call NextBuffer(1)<CR>
nnoremap <silent> gB :call NextBuffer(-1)<CR>
nnoremap <silent> g= :set lazyredraw<CR>gg=G`'zz:set nolazyredraw<CR>
nnoremap <silent> gy "+y
vnoremap <silent> gy "+y

nnoremap <silent> gp :execute "r !wl-paste \| sed 's/\r//'"<CR>

cnoremap <C-a> <C-b>

function s:prev_word()
  let col = getpos('.')[2]
  let substring = getline('.')[0:col-1]
  let word = matchstr(substring, '\v<(\k(<)@!)*$')
  return word
endfunction

function s:toggle_case(value)
  if matchstr(a:value, '\u') == ""
    return toupper(a:value)
  else
    return tolower(a:value)
  endif
endfunction

inoremap <expr> <C-L> "<C-W>" .. <SID>toggle_case(<SID>prev_word())

fun! PrintSyntaxGroup()
  let l:s = synID(line('.'), col('.'), 1)
  echo synIDattr(l:s, 'name') . ' -> ' . synIDattr(synIDtrans(l:s), 'name')
endfun

fun! NextBuffer(idx)
  let bufs = s:get_normalbuffers()
  if len(bufs) == 0
    echo "No normal buffers available"
    return
  endif
  let dict = s:to_keybased_doubly_circularlist(bufs)
  if !has_key(dict, bufnr())
    echo printf("Current buffer %d is not a normal buffer", bufnr())
    return
  endif
  let n = -1
  if a:idx == 1
    let n = s:to_keybased_doubly_circularlist(bufs)[bufnr()].next.value
  elseif a:idx == -1
    let n = s:to_keybased_doubly_circularlist(bufs)[bufnr()].prev.value
  else
    echo "Argument idx must be 1 or -1"
    return
  endif
  execute "b" n
endfun

fun! s:get_normalbuffers()
  let arr = []
  for buf in getbufinfo({'buflisted': 1})
    " if the buf is a normal buffer and not a netrw buffer
    if getbufvar(buf.bufnr, '&buftype') == ''
          \ && getbufvar(buf.bufnr, 'netrw_browser_active') != 1
      let arr = add(arr,buf.bufnr)
    endif
  endfor
  return arr
endfun

function! s:to_keybased_doubly_circularlist(arr)
  function! s:new_node(value, prev, next)
    let n = {
          \ 'value': a:value,
          \ 'prev': a:prev,
          \ 'next': a:next
          \ }
    return n
  endfunction

  if empty(a:arr)
    return {}
  endif

  let d = {}
  let head = s:new_node(a:arr[0], {}, {})
  let d[head.value] = head

  let cur = head
  for elem in a:arr[1:]
    let node = s:new_node(elem, cur, {})
    let cur.next = node
    let cur = node
    let d[cur.value] = cur
  endfor

  let cur.next = head
  let head.prev = cur
  let d[cur.value] = cur

  return d
endfunction

" Output the circular list dictionary
function! PrintKeyBasedDoublyCircularList(dict)
  for key in keys(a:dict)
    let node = a:dict[key]
    echo printf(
          \ "Value: %s, Prev: %s, Next: %s",
          \ node.value, node.prev.value, node.next.value)
  endfor
endfunction
